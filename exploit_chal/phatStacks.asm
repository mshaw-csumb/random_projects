BITS 32

section .text

global _start

_start:

	;load bytes into stack, then push them
	;this won't be pretty

	;loading, negating and pushing bytes to stack


	mov eax, 0
	push eax	
	
	;the flag bytes inverted with two's complement.
	;negate and add one to each byte before pushing to stack
	mov eax, 0xa3cd948b
	not eax
	add eax, 0x01010101
	push eax

	mov eax, 0x8e8d959d
	not eax
	add eax, 0x01010101
	push eax

	mov eax, 0xcc8cada5
	not eax
	add eax, 0x01010101
	push eax
	
	mov eax, "flag"
	push eax

	;give them a "hint"
	mov eax, 4
	mov ebx, 1
	mov ecx, msg
	mov edx, 36
	int 0x80
	
	mov eax, 4
	mov ebx, 1
	mov ecx, input_msg
	mov edx, 31 
	int 0x80
	
	;wait for input, give chance to stop in gdb	
	mov eax, 3
	mov ebx, 0
	mov ecx, input
	mov edx, 19 	
	int 0x80


	mov eax, 1
	mov ebx, 0 
	int 0x80

section .data

	msg  db "At this point you can find the flag",10
	input_msg db "Press enter to end the program:",10

section .bss

	input: resb 20
